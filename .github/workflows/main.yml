name: Continuous Integration and Delivery

on: [push]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-test:
    name: Backend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: backend/.venv
          key: venv2-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install --no-interaction --no-root

      - name: Install library
        working-directory: backend
        run: poetry install --no-interaction

      - name: Lint
        working-directory: backend
        run: |
          source .venv/bin/activate
          black --check exegete

  frontend-test:
    name: Frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: npm install
        run: cd frontend && npm install

      - name: lint
        run: cd frontend && npx prettier --check .

      - name: test
        run: cd frontend && npm run test

  frontend-build:
    name: Frontend build
    runs-on: ubuntu-latest
    needs: [frontend-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build static assets
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: build static assets
        run: bash ./collectstatic.sh

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: docker_meta_static
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/exegeteapp/exegete-static

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: static/
          file: ./static/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta_static.outputs.tags }}
          labels: ${{ steps.docker_meta_static.outputs.labels }}

  backend-build:
    name: Backend build
    runs-on: ubuntu-latest
    needs: [backend-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: docker_meta_backend
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/exegeteapp/exegete-backend

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: backend/
          file: ./backend/Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta_backend.outputs.tags }}
          labels: ${{ steps.docker_meta_backend.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # workaround for https://github.com/docker/build-push-action/issues/252
      - name: Correct buildx cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  push-staging:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up SSH
        run: 'mkdir -p /home/runner/.ssh && echo "$SSH_KEY" > /home/runner/.ssh/id_rsa && chmod 600 /home/runner/.ssh/id_rsa'
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_KEY}}
      - name: Trigger deployment
        run: ssh -o StrictHostKeyChecking=no -p 6237 ci@retro.grahame.dev
        shell: bash
